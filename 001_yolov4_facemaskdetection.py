# -*- coding: utf-8 -*-
"""001_YOLOv4_faceMaskDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NNe_hfEjXY3Y5D8mOtbAOv2qmFiUpBkV

## 1. Create yolov4 and training folders in your drive
Create a folder named yolov4 in your drive.

Next, create another folder named training inside the yolov4 folder. This is where we will save our trained weights (This path is mentioned in the obj.data file which we will upload later)

## 2.Mount drive, link your folder and navigate to /mydrive/yolov4 folder
"""

# Commented out IPython magic to ensure Python compatibility.
#mount drive
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

# this creates a symbolic link so that now the path /content/gdrive/My\ Drive/ is equal to /mydrive
!ln -s /content/gdrive/My\ Drive/ /mydrive

# list the contents of /mydrive
!ls /mydrive

#Navigate to /mydrive/yolov4
# %cd /mydrive/yolov4

"""## 3. Clone darknet git repository"""

!git clone https://github.com/AlexeyAB/darknet

"""## 4. Create & upload the following files which we need for training a custom detector
a. Labeled Custom Dataset

b. Custom cfg file

c. obj.data and obj.names files

d. process.py file (to create train.txt and test.txt files for training)

## 4(a) Upload the Labeled custom dataset obj.zip file to the yolov4 folder on your drive
Create the zip file obj.zip from the obj folder containing both the input image ".jpg" files and their corresponding YOLO format labeled ".txt" files.

Upload the zip file to the yolov4 folder on your drive.

## 4(b) Create your custom config file and upload it to your drive
Download the yolov4-custom.cfg file from darknet/cfg directory, make changes to it, and upload it to the yolov4 folder on your drive .

You can also download the custom config file from the official AlexeyAB Github

## 4(c) Create your obj.data and obj.names files and upload to your drive

## 4(d) Upload the process.py script file to the yolov4 folder on your drive
To divide all image files into 2 parts. 90% for train and 10% for test.

This process.py script creates the files train.txt & test.txt where the train.txt file has paths to 90% of the images and test.txt has paths to 10% of the images.

You can download the process.py script from my GitHub.

## 5. Make changes in the makefile to enable OPENCV and GPU
"""

# Commented out IPython magic to ensure Python compatibility.
# change makefile to have GPU and OPENCV enabled
# also set CUDNN, CUDNN_HALF and LIBSO to 1

# %cd darknet/
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile
!sed -i 's/LIBSO=0/LIBSO=1/' Makefile

"""## 6. Run make command to build darknet"""

# build darknet 
!make

"""## 7. Copy all the files from the yolov4 folder to the darknet directory"""

# Commented out IPython magic to ensure Python compatibility.
# Clean the data and cfg folders first except the labels folder in data which is required

# %cd data/
!find -maxdepth 1 -type f -exec rm -rf {} \;
# %cd ..

# %rm -rf cfg/
# %mkdir cfg

# Unzip the obj.zip dataset and its contents so that they are now in /darknet/data/ folder 
# to unzip the contents in darknet/data folder
!unzip /mydrive/yolov4/obj.zip -d data/

# Copy the yolov4-custom.cfg file so that it is now in /darknet/cfg/ folder 

!cp /mydrive/yolov4/yolov4-custom.cfg cfg

# verify if your custom file is in cfg folder
!ls cfg/

# Copy the obj.names and obj.data files from your drive so that they are now in /darknet/data/ folder 

!cp /mydrive/yolov4/obj.names data
!cp /mydrive/yolov4/obj.data  data

# verify if the above files are in data folder
!ls data/

# Copy the process.py file to the current darknet directory 

!cp /mydrive/yolov4/process.py .

"""## 8. Run the process.py python script to create the train.txt & test.txt files inside the data folder"""

# run process.py ( this creates the train.txt and test.txt files in our darknet/data folder )
!python process.py

# list the contents of data folder to check if the train.txt and test.txt files have been created 
!ls data/

"""## 9. Download the pre-trained yolov4 weights"""

# Download the yolov4 pre-trained weights file
!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137

"""## 10. TRAINING

## Train your custom detector
For best results, you should stop the training when the average loss is less than 0.05 if possible or at least below 0.3, else train the model until the average loss does not show any significant change for a while.
"""

# train your custom detector! (uncomment %%capture below if you run into memory issues or your Colab is crashing)
# %%capture

!./darknet detector train data/obj.data cfg/yolov4-custom.cfg yolov4.conv.137 -dont_show -map

"""## NOTE: If you get disconnected or lose your session for some reason you have to run steps 2, 5, and 6 again to mount the drive, edit makefile and build darknet every single time, otherwise the darknet executable will not work.

To restart your training (In case the training does not finish and you get disconnected)
If you get disconnected or lose your session, you don't have to start training your model from scratch again. You can restart training from where you left off. Use the weights that were saved last. The weights are saved every 100 iterations as yolov4-custom_last.weights in the yolov4/training folder on your drive. (The path we gave as backup in "obj.data" file).

So to restart training run only Steps 2, 5, 6 and then run the following command
"""

#to restart training your custom detector where you left off(using the weights that were saved last)

!./darknet detector train data/obj.data cfg/yolov4-custom.cfg /mydrive/yolov4/tr*aining/yolov4-custom_last.weights -dont_show -map

"""### Use this simple hack for Auto-Click to avoid being kicked off Colab VM
Press (Ctrl + Shift + i) . Go to console. Paste the following code and press Enter.
"""

function ClickConnect(){
console.log("Working"); 
document
  .querySelector('#top-toolbar > colab-connect-button')
  .shadowRoot.querySelector('#connect')
  .click() 
}
setInterval(ClickConnect,60000)

"""## 11. Check performance"""

# Commented out IPython magic to ensure Python compatibility.
# define helper function imShow
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

"""### Check the training chart"""

#only works if the training does not get interrupted
imShow('chart.png')

"""### Check mAP (mean average precision)"""

##You can check the mAP for all the saved weights to see which gives the best results ( xxxx here is the saved weight number like 4000, 5000 or 6000 snd so on )

# !./darknet detector map data/obj.data cfg/yolov4-custom.cfg /mydrive/yolov4/training/yolov4-custom_xxxx.weights -points 0
!./darknet detector map data/obj.data cfg/yolov4-custom.cfg /mydrive/yolov4/training/yolov4-custom_4000.weights -points 0

"""## 12. Test your custom Object Detector

### Make changes to your custom config file
- change line batch to batch=1
- change line subdivisions to subdivisions=1
- You can do it either manually or by simply running the code below
"""

# Commented out IPython magic to ensure Python compatibility.
#set your custom cfg to test mode 
# %cd cfg
!sed -i 's/batch=64/batch=1/' yolov4-custom.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov4-custom.cfg
# %cd ..

"""## Run detector on an image"""

# run your custom detector with this command (upload an image to your google drive to test, the thresh flag sets the minimum accuracy required for object detection)

!./darknet detector test data/obj.data cfg/yolov4-custom.cfg /mydrive/yolov4/training/yolov4-custom_best.weights /content/gdrive/MyDrive/mask_test_image/4.jpg -thresh 0.3 
imShow('predictions.jpg')

